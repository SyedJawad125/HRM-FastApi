# """add leave table

# Revision ID: ab2f1c414307
# Revises: b71c898d4c34
# Create Date: 2025-07-10 12:04:29.076539

# """
# from typing import Sequence, Union

# from alembic import op
# import sqlalchemy as sa


# # revision identifiers, used by Alembic.
# revision: str = 'ab2f1c414307'
# down_revision: Union[str, Sequence[str], None] = 'b71c898d4c34'
# branch_labels: Union[str, Sequence[str], None] = None
# depends_on: Union[str, Sequence[str], None] = None


# def upgrade() -> None:
#     """Upgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('employees') as batch_op:
#     batch_op.create_foreign_key('fk_rank_id', 'ranks', ['rank_id'], ['id'])
#     op.alter_column('leaves', 'status',
#                existing_type=sa.VARCHAR(),
#                nullable=True,
#                existing_server_default=sa.text("'pending'"))
#     op.drop_constraint(None, 'leaves', type_='foreignkey')
#     op.drop_constraint(None, 'leaves', type_='foreignkey')
#     op.create_foreign_key(None, 'leaves', 'users', ['employee_id'], ['id'])
#     op.create_foreign_key(None, 'leaves', 'users', ['approved_by_id'], ['id'])
#     # ### end Alembic commands ###


# def downgrade() -> None:
#     """Downgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.drop_constraint(None, 'leaves', type_='foreignkey')
#     op.drop_constraint(None, 'leaves', type_='foreignkey')
#     op.create_foreign_key(None, 'leaves', 'users', ['approved_by_id'], ['id'], ondelete='SET NULL')
#     op.create_foreign_key(None, 'leaves', 'users', ['employee_id'], ['id'], ondelete='CASCADE')
#     op.alter_column('leaves', 'status',
#                existing_type=sa.VARCHAR(),
#                nullable=False,
#                existing_server_default=sa.text("'pending'"))
#     op.drop_constraint(None, 'employees', type_='foreignkey')
#     with op.batch_alter_table('employees') as batch_op:
#         batch_op.drop_constraint('fk_rank_id', type_='foreignkey')



"""add leave table

Revision ID: ab2f1c414307
Revises: b71c898d4c34
Create Date: 2025-07-10 12:04:29.076539
"""

from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa

# Revision identifiers, used by Alembic
revision: str = 'ab2f1c414307'
down_revision: Union[str, Sequence[str], None] = 'b71c898d4c34'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

    # ✅ Safe foreign key creation for SQLite using batch mode
    with op.batch_alter_table('employees') as batch_op:
        batch_op.create_foreign_key('fk_rank_id', 'ranks', ['rank_id'], ['id'])

    # ❌ Removed: op.alter_column — SQLite does not support altering column constraints

    # ✅ Create foreign keys with explicit names (SQLite requires names)
    op.create_foreign_key('fk_leave_employee_id', 'leaves', 'users', ['employee_id'], ['id'])
    op.create_foreign_key('fk_leave_approved_by_id', 'leaves', 'users', ['approved_by_id'], ['id'])


def downgrade() -> None:
    """Downgrade schema."""

    # Drop foreign keys created in upgrade()
    op.drop_constraint('fk_leave_approved_by_id', 'leaves', type_='foreignkey')
    op.drop_constraint('fk_leave_employee_id', 'leaves', type_='foreignkey')

    # Optionally recreate original constraints (for other DBs)
    op.create_foreign_key(
        'fk_leave_approved_by_id',
        'leaves',
        'users',
        ['approved_by_id'],
        ['id'],
        ondelete='SET NULL'
    )
    op.create_foreign_key(
        'fk_leave_employee_id',
        'leaves',
        'users',
        ['employee_id'],
        ['id'],
        ondelete='CASCADE'
    )

    # Remove rank_id foreign key
    with op.batch_alter_table('employees') as batch_op:
        batch_op.drop_constraint('fk_rank_id', type_='foreignkey')
